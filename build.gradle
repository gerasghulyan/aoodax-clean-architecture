plugins {
    id 'base'
    id 'org.sonarqube' version '3.3'
    id 'project.java-owasp'
    id 'project.java-license'
    id "org.ajoberstar.grgit" version "4.1.1"
}

subprojects {
    apply plugin: 'subproject.java-conventions'
    apply plugin: 'maven-publish'
    version = '1.0.0'
    group = 'com.aoodax.platform'

    repositories {
        mavenLocal()
        mavenCentral()
//        maven {
//            credentials {
//                username System.getenv('REPOSITORY_USERNAME')
//                password System.getenv('REPOSITORY_PASSWORD')
//            }
//            url "https://artifactory.aoodax.com/artifactory/maven-${getBranchName() == 'main' ? 'releases' : 'snapshots'}/"
//        }
    }

    dependencies {
        implementation 'com.aoodax.jvm.common:utils'
        implementation 'jakarta.annotation:jakarta.annotation-api'
        implementation 'com.google.code.findbugs:jsr305'

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.mockito:mockito-junit-jupiter'
        testImplementation 'com.aoodax.jvm.common:unit-test'
        testImplementation 'com.aoodax.jvm.common:test-toolkit'
    }
}

sonarqube {
    properties {
        property "sonar.exclusions",
                "**/entrypoint/**/*.java," +
                        "**/*Exception.java," +
                        "**/configuration/**/*," +
                        "**/dto/**," +
                        "**/meta/**," +
                        "**/filter/**," +
                        "**/interfaces/**," +
                        "**/entity/**," +
                        "**/*Meta.java," +
                        "**/enumeration/**," +
                        "**/utils/**," +
                        "**/repository/**," +
                        "**/specification/**,"

    }
}

def environmentPlatformVersion(libraryVersion) {
    def branch = getBranchName()
    switch (branch) {
        case "develop":
            return "$libraryVersion-SNAPSHOT"
        case "main":
            return libraryVersion
        default:
            if (branch =~ /^release.*/) {
                return "$libraryVersion-release-SNAPSHOT"
            }
            return "$libraryVersion-SNAPSHOT"
    }
}

private String getBranchName() {
    return "develop"
//    System.getenv("ci_commit_branch") ?: grgit.getBranch().current().name //TODO uncomment
}

//plugins {
//    id 'java'
//    id 'org.springframework.boot' version '3.1.2'
//    id 'io.spring.dependency-management' version '1.1.2'
//}
//
//group = 'am.urgnam'
//version = '0.0.1-SNAPSHOT'
//
//java {
//    sourceCompatibility = '17'
//}
//
//repositories {
//    mavenCentral()
//}
//
//dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//    implementation 'org.springframework.boot:spring-boot-starter-web'
//    
//    compileOnly 'org.projectlombok:lombok'
//    annotationProcessor 'org.projectlombok:lombok'
//    
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//}
//
//tasks.named('test') {
//    useJUnitPlatform()
//}
//
//task printJavaVersion {
//    doLast {
//        System.out.println("Java version: " + JavaVersion.current());
//    }
//}
