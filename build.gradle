plugins {
    id 'base'
    id 'org.sonarqube' version '3.3'
    id 'project.java-owasp'
    id 'project.java-license'
    id "org.ajoberstar.grgit" version "4.1.1"
}

subprojects {
    apply plugin: 'subproject.java-conventions'
    apply plugin: 'maven-publish'
    version = '1.0.0'
    group = 'com.aoodax.platform'

    repositories {
        mavenLocal()
        mavenCentral()
//        maven {
//            credentials {
//                username System.getenv('REPOSITORY_USERNAME')
//                password System.getenv('REPOSITORY_PASSWORD')
//            }
//            url "https://artifactory.aoodax.com/artifactory/maven-${getBranchName() == 'main' ? 'releases' : 'snapshots'}/"
//        }
    }

    dependencies {
        implementation 'com.aoodax.jvm.common:utils'
        implementation 'jakarta.annotation:jakarta.annotation-api'
        implementation 'com.google.code.findbugs:jsr305'

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"

        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.mockito:mockito-junit-jupiter'
        testImplementation 'com.aoodax.jvm.common:unit-test'
        testImplementation 'com.aoodax.jvm.common:test-toolkit'
    }
}

sonarqube {
    properties {
        property "sonar.exclusions",
                "**/entrypoint/**/*.java," +
                        "**/*Exception.java," +
                        "**/configuration/**/*," +
                        "**/dto/**," +
                        "**/meta/**," +
                        "**/filter/**," +
                        "**/interfaces/**," +
                        "**/entity/**," +
                        "**/*Meta.java," +
                        "**/enumeration/**," +
                        "**/utils/**," +
                        "**/repository/**," +
                        "**/specification/**,"

    }
}

task printModulesWithPackages {
    doLast {
        subprojects.sort { it.path }.each { project ->
            // Calculate the depth based on the project's path.
            def depth = project.path.split(':').length - 1
            def indentation = ('-' * depth) + ' '

            def mainSourceSet = project.sourceSets.main
            if (mainSourceSet != null) {
                def packageName = ''
                def packageDir = mainSourceSet.java.srcDirs.find { it.exists() }
                if (packageDir != null) {
                    def allFiles = packageDir.listFiles()
                    if (allFiles != null) {
                        def firstJavaFile = allFiles.find { it.name.endsWith('.java') || it.name.endsWith('.kt') }
                        if (firstJavaFile != null) {
                            firstJavaFile.eachLine { line ->
                                if (line.startsWith('package ')) {
                                    packageName = line.replaceAll('package ', '').replaceAll(';', '').trim()
                                    return
                                }
                            }
                        }
                    }
                }
                println "$indentation${project.name}: $packageName"
            }
        }
    }
}